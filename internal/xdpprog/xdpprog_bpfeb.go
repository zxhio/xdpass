// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package xdpprog

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type xdpprogIpLpmKey struct {
	_         structs.HostLayout
	PrefixLen uint32
	Data      [16]uint8
}

// loadXdpprog returns the embedded CollectionSpec for xdpprog.
func loadXdpprog() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_XdpprogBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load xdpprog: %w", err)
	}

	return spec, err
}

// loadXdpprogObjects loads xdpprog and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*xdpprogObjects
//	*xdpprogPrograms
//	*xdpprogMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadXdpprogObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadXdpprog()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// xdpprogSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpprogSpecs struct {
	xdpprogProgramSpecs
	xdpprogMapSpecs
	xdpprogVariableSpecs
}

// xdpprogProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpprogProgramSpecs struct {
	XdpRedirectXskProg *ebpf.ProgramSpec `ebpf:"xdp_redirect_xsk_prog"`
}

// xdpprogMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpprogMapSpecs struct {
	IpLpmTrie *ebpf.MapSpec `ebpf:"ip_lpm_trie"`
	XskMap    *ebpf.MapSpec `ebpf:"xsk_map"`
}

// xdpprogVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpprogVariableSpecs struct {
}

// xdpprogObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadXdpprogObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpprogObjects struct {
	xdpprogPrograms
	xdpprogMaps
	xdpprogVariables
}

func (o *xdpprogObjects) Close() error {
	return _XdpprogClose(
		&o.xdpprogPrograms,
		&o.xdpprogMaps,
	)
}

// xdpprogMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadXdpprogObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpprogMaps struct {
	IpLpmTrie *ebpf.Map `ebpf:"ip_lpm_trie"`
	XskMap    *ebpf.Map `ebpf:"xsk_map"`
}

func (m *xdpprogMaps) Close() error {
	return _XdpprogClose(
		m.IpLpmTrie,
		m.XskMap,
	)
}

// xdpprogVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadXdpprogObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpprogVariables struct {
}

// xdpprogPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadXdpprogObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpprogPrograms struct {
	XdpRedirectXskProg *ebpf.Program `ebpf:"xdp_redirect_xsk_prog"`
}

func (p *xdpprogPrograms) Close() error {
	return _XdpprogClose(
		p.XdpRedirectXskProg,
	)
}

func _XdpprogClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed xdpprog_bpfeb.o
var _XdpprogBytes []byte
